data_root = /home/andreas/data/bigbird/
objects_file_location = /home/andreas/data/gpd/bigbird_pcds/objects.txt
output_root = /home/andreas/data/gpd/descriptors/
num_views_per_object = 20
test_views = 2 5 8 13 16

# Path to config file for robot hand geometry
hand_geometry_filename = ../cfg/hand_geometry.cfg

# Path to config file for volume and image geometry
#image_geometry_filename = ../cfg/image_geometry_15channels.cfg
image_geometry_filename = ../cfg/image_geometry_12channels.cfg
# image_geometry_filename = ../cfg/image_geometry_3channels.cfg

# Path to directory that contains neural network parameters
lenet_params_dir = ../lenet/15channels/params/
# lenet_params_dir = /home/andreas/data/gpd/caffe/15channels/params/
# lenet_params_dir = /home/andreas/data/gpd/caffe/3channels/params/

# Preprocessing of point cloud
#   voxelize: if the cloud gets voxelized/downsampled
#   remove_outliers: if statistical outliers are removed from the cloud (used to remove noise)
#   workspace: the workspace of the robot (dimensions of a cube centered at origin of point cloud)
#   camera_position: the position of the camera from which the cloud was taken
voxelize = 1
remove_outliers = 0
workspace = -1 1 -1 1 -1 1
camera_position = 0 0 1

# Grasp candidate generation
#   num_samples: the number of samples to be drawn from the point cloud
#   num_threads: the number of CPU threads to be used
#   nn_radius: the radius for the neighborhood search
#   num_orientations: the number of robot hand orientations to evaluate
#   rotation_axes: the axes about which the point neighborhood gets rotated
num_samples = 500
num_threads = 4
nn_radius = 0.01
num_orientations = 8
hand_axes = 2

# Filtering of candidates
#   min_aperture: the minimum gripper width
#   max_aperture: the maximum gripper width
#   workspace_grasps: dimensions of a cube centered at origin of point cloud; should be smaller than <workspace>
min_aperture = 0.0
max_aperture = 0.85
workspace_grasps = -0.5 1 -0.35 0.35 -0.12 1

# Filtering of grasps which are too low on (i.e. too close to) support surface (e.g., table or floor)
#   filter_table_side_grasps: turn this filter on/off
#   vertical_axis: the vertical axis in the point cloud frame
#   angle_thresh: threshold to determine which grasps are considered to be side grasps
#   table_height: the height of the support surface (along vertical axis)
#   table_thresh: thresold below which grasps are considered to close too the support surface
filter_table_side_grasps = 0
vertical_axis = 0 0 1
angle_thresh = 0.1
table_height = 0.0
table_thresh = 0.05

# Grasp image creation
#   remove_plane_before_image_calculation: remove support plane from point cloud to speed up image computations
#   create_image_batches: creates grasp images in batches (less memory usage)
remove_plane_before_image_calculation = 0
create_image_batches = 0

# Clustering of grasps
#   min_inliers: minimum number of inliers per cluster; set to 0 to turn off clustering
min_inliers = 1

# Grasp selection
#   min_score: threshold to sort out "bad" grasps
#   num_selected: number of selected grasps (sorted by score)
min_score = -5000
num_selected = 100

# Visualization
#   plot_normals: plot the surface normals
#   plot_samples: plot the samples
#   plot_candidates: plot the grasp candidates
#   plot_filtered_candidates: plot the grasp candidates which remain after filtering
#   plot_valid_grasps: plot the candidates that are identified as valid grasps
#   plot_clustered_grasps: plot the grasps that after clustering
#   plot_selected_grasps: plot the selected grasps (final output)
plot_normals = 0
plot_samples = 0
plot_candidates = 0
plot_filtered_candidates = 0
plot_valid_grasps = 0
plot_clustered_grasps = 0
plot_selected_grasps = 0
